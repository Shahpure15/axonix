import { useState, useEffect } from 'react';
import { useRouter } from 'next/router';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import { CheckCircle2, XCircle, Clock, Award, AlertTriangle, BookOpen } from 'lucide-react';

interface TestResult {
  sessionId: string;
  moduleId: string;
  subModuleId: string;
  score: number;
  totalPoints: number;
  earnedPoints: number;
  timeSpent: number;
  questions: Array<{
    id: string;
    question: string;
    userAnswer: any;
    correctAnswer: any;
    isCorrect: boolean;
    points: number;
    difficulty: string;
  }>;
  subtasks: Array<{
    id: string;
    title: string;
    description: string;
    type: 'practice' | 'concept' | 'quiz';
    difficulty: 'beginner' | 'intermediate' | 'advanced';
    estimatedTime: string;
  }>;
  feedback: string;
  nextModuleUnlocked: boolean;
}

const TestResultsPage = () => {
  const router = useRouter();
  const { session } = router.query;
  const [results, setResults] = useState<TestResult | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    if (session) {
      loadTestResults();
    }
  }, [session]);

  const loadTestResults = async () => {
    try {
      // In a real app, this would fetch from an API
      // For now, we'll simulate the results based on the session ID
      const mockResults: TestResult = {
        sessionId: session as string,
        moduleId: 'arrays',
        subModuleId: 'array-basics',
        score: 65, // This would come from Worqhat analysis
        totalPoints: 55,
        earnedPoints: 36,
        timeSpent: 1200, // 20 minutes
        questions: [
          {
            id: 'q1',
            question: 'What is the time complexity of accessing an element in an array by index?',
            userAnswer: 2,
            correctAnswer: 2,
            isCorrect: true,
            points: 10,
            difficulty: 'Easy'
          },
          {
            id: 'q2',
            question: 'In C++, which of the following correctly declares an array of 10 integers?',
            userAnswer: 0,
            correctAnswer: 0,
            isCorrect: true,
            points: 10,
            difficulty: 'Easy'
          },
          {
            id: 'q3',
            question: 'Write a C++ function to find the maximum element in an array of integers.',
            userAnswer: 'int findMax(vector<int>& arr) {\n    int max = arr[0];\n    for(int i = 0; i < arr.size(); i++) {\n        if(arr[i] > max) max = arr[i];\n    }\n    return max;\n}',
            correctAnswer: 'Various correct implementations',
            isCorrect: true,
            points: 16, // Partial credit
            difficulty: 'Medium'
          },
          {
            id: 'q4',
            question: 'Explain the difference between arrays and vectors in C++. When would you use each?',
            userAnswer: 'Arrays are fixed size, vectors are dynamic',
            correctAnswer: 'Detailed explanation expected',
            isCorrect: false,
            points: 0,
            difficulty: 'Medium'
          }
        ],
        // These subtasks would be generated by Worqhat based on wrong answers
        subtasks: [
          {
            id: 'st1',
            title: 'Dynamic vs Static Memory Allocation',
            description: 'Understanding the difference between arrays and vectors in memory management',
            type: 'concept',
            difficulty: 'intermediate',
            estimatedTime: '15 min'
          },
          {
            id: 'st2',
            title: 'Vector Operations Practice',
            description: 'Practice common vector operations like push_back, resize, and capacity',
            type: 'practice',
            difficulty: 'beginner',
            estimatedTime: '20 min'
          },
          {
            id: 'st3',
            title: 'Memory Management Quiz',
            description: 'Quick quiz on memory allocation concepts',
            type: 'quiz',
            difficulty: 'intermediate',
            estimatedTime: '10 min'
          }
        ],
        feedback: 'Good understanding of basic array operations! You need to work on understanding the differences between arrays and vectors, particularly in memory management.',
        nextModuleUnlocked: false // Since score < 70%
      };

      setResults(mockResults);
      setLoading(false);
    } catch (error) {
      console.error('Error loading test results:', error);
      router.push('/roadmap');
    }
  };

  const handleRetakeTest = () => {
    if (results) {
      router.push(`/test?module=${results.moduleId}&submodule=${results.subModuleId}`);
    }
  };

  const handleStartSubtask = (subtaskId: string) => {
    // Navigate to subtask page
    router.push(`/subtask?id=${subtaskId}&module=${results?.moduleId}&submodule=${results?.subModuleId}`);
  };

  const handleBackToRoadmap = () => {
    router.push('/roadmap');
  };

  const formatTime = (seconds: number) => {
    const minutes = Math.floor(seconds / 60);
    const remainingSeconds = seconds % 60;
    return `${minutes}m ${remainingSeconds}s`;
  };

  const getScoreColor = (score: number) => {
    if (score >= 80) return 'text-green-600';
    if (score >= 60) return 'text-yellow-600';
    return 'text-red-600';
  };

  const getSubtaskTypeIcon = (type: string) => {
    switch (type) {
      case 'concept': return <BookOpen className="h-4 w-4" />;
      case 'practice': return <Award className="h-4 w-4" />;
      case 'quiz': return <CheckCircle2 className="h-4 w-4" />;
      default: return <BookOpen className="h-4 w-4" />;
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading test results...</p>
        </div>
      </div>
    );
  }

  if (!results) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center">
        <Card className="w-full max-w-md">
          <CardContent className="p-6 text-center">
            <AlertTriangle className="h-12 w-12 text-yellow-500 mx-auto mb-4" />
            <h3 className="text-lg font-semibold mb-2">Results Not Found</h3>
            <p className="text-gray-600 mb-4">
              Could not load test results.
            </p>
            <Button onClick={handleBackToRoadmap}>
              Back to Roadmap
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100">
      {/* Header */}
      <div className="bg-white shadow-sm border-b">
        <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="text-center">
            <h1 className="text-3xl font-bold text-gray-900">Test Results</h1>
            <p className="text-gray-600 mt-2 capitalize">
              {results.moduleId} - {results.subModuleId.replace('-', ' ')}
            </p>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-8 space-y-8">
        
        {/* Score Overview */}
        <Card className="bg-white shadow-lg">
          <CardContent className="p-8">
            <div className="text-center mb-6">
              <div className={`text-6xl font-bold mb-2 ${getScoreColor(results.score)}`}>
                {results.score}%
              </div>
              <div className="text-gray-600">
                {results.earnedPoints} / {results.totalPoints} points
              </div>
              <Progress value={results.score} className="w-full mt-4" />
            </div>

            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 text-center">
              <div>
                <Clock className="h-8 w-8 text-blue-500 mx-auto mb-2" />
                <div className="text-lg font-semibold">{formatTime(results.timeSpent)}</div>
                <div className="text-sm text-gray-600">Time Spent</div>
              </div>
              <div>
                <CheckCircle2 className="h-8 w-8 text-green-500 mx-auto mb-2" />
                <div className="text-lg font-semibold">
                  {results.questions.filter(q => q.isCorrect).length}/{results.questions.length}
                </div>
                <div className="text-sm text-gray-600">Correct Answers</div>
              </div>
              <div>
                <Award className="h-8 w-8 text-purple-500 mx-auto mb-2" />
                <div className="text-lg font-semibold">
                  {results.score >= 70 ? 'Passed' : 'Need Improvement'}
                </div>
                <div className="text-sm text-gray-600">Status</div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Feedback */}
        <Card className="bg-white shadow-lg">
          <CardHeader>
            <CardTitle className="flex items-center">
              <BookOpen className="h-5 w-5 mr-2" />
              AI Feedback
            </CardTitle>
          </CardHeader>
          <CardContent>
            <p className="text-gray-700 leading-relaxed">{results.feedback}</p>
          </CardContent>
        </Card>

        {/* Question Breakdown */}
        <Card className="bg-white shadow-lg">
          <CardHeader>
            <CardTitle>Question Breakdown</CardTitle>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              {results.questions.map((question, index) => (
                <div key={question.id} className="border rounded-lg p-4">
                  <div className="flex items-start justify-between mb-2">
                    <div className="flex items-center">
                      <span className="text-sm font-medium text-gray-600 mr-2">
                        Q{index + 1}:
                      </span>
                      {question.isCorrect ? (
                        <CheckCircle2 className="h-5 w-5 text-green-500" />
                      ) : (
                        <XCircle className="h-5 w-5 text-red-500" />
                      )}
                    </div>
                    <div className="flex items-center space-x-2">
                      <Badge variant="outline" className="text-xs">
                        {question.difficulty}
                      </Badge>
                      <span className="text-sm text-gray-600">
                        {question.points} pts
                      </span>
                    </div>
                  </div>
                  <p className="text-gray-900 text-sm mb-2">{question.question}</p>
                  <div className="text-xs text-gray-600">
                    {question.isCorrect ? (
                      <span className="text-green-600">✓ Correct answer</span>
                    ) : (
                      <span className="text-red-600">✗ Incorrect answer</span>
                    )}
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* Recommended Subtasks */}
        {results.subtasks.length > 0 && (
          <Card className="bg-white shadow-lg">
            <CardHeader>
              <CardTitle className="flex items-center">
                <AlertTriangle className="h-5 w-5 mr-2 text-orange-500" />
                Recommended Study Plan
              </CardTitle>
              <p className="text-sm text-gray-600">
                Complete these subtasks to strengthen your understanding before proceeding
              </p>
            </CardHeader>
            <CardContent>
              <div className="space-y-4">
                {results.subtasks.map((subtask, index) => (
                  <div key={subtask.id} className="border rounded-lg p-4 hover:shadow-md transition-shadow">
                    <div className="flex items-start justify-between">
                      <div className="flex-1">
                        <div className="flex items-center mb-2">
                          {getSubtaskTypeIcon(subtask.type)}
                          <h4 className="font-semibold text-gray-900 ml-2">
                            {subtask.title}
                          </h4>
                        </div>
                        <p className="text-sm text-gray-600 mb-3">{subtask.description}</p>
                        <div className="flex items-center space-x-4">
                          <Badge 
                            variant="outline" 
                            className={`text-xs ${
                              subtask.difficulty === 'beginner' ? 'border-green-200 text-green-800' :
                              subtask.difficulty === 'intermediate' ? 'border-yellow-200 text-yellow-800' :
                              'border-red-200 text-red-800'
                            }`}
                          >
                            {subtask.difficulty}
                          </Badge>
                          <span className="text-xs text-gray-500">
                            <Clock className="h-3 w-3 inline mr-1" />
                            {subtask.estimatedTime}
                          </span>
                        </div>
                      </div>
                      <Button
                        size="sm"
                        onClick={() => handleStartSubtask(subtask.id)}
                        className="ml-4"
                      >
                        Start
                      </Button>
                    </div>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        )}

        {/* Actions */}
        <div className="flex justify-center space-x-4">
          <Button variant="outline" onClick={handleBackToRoadmap}>
            Back to Roadmap
          </Button>
          <Button variant="outline" onClick={handleRetakeTest}>
            Retake Test
          </Button>
          {results.nextModuleUnlocked && (
            <Button className="bg-green-600 hover:bg-green-700">
              Continue to Next Module
            </Button>
          )}
        </div>
      </div>
    </div>
  );
};

export default TestResultsPage;
