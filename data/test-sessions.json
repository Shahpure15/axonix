[
  {
    "sessionId": "arrays-array-basics-1755573088499",
    "submission": {
      "moduleId": "arrays",
      "subModuleId": "array-basics",
      "userId": "test-user",
      "startTime": "2025-08-19T03:11:13.247Z",
      "answers": {
        "q1": 3,
        "q2": 1
      },
      "timeSpent": 15,
      "currentQuestion": 0,
      "endTime": "2025-08-19T03:11:28.415Z",
      "completed": true
    },
    "score": 0,
    "results": {
      "subtasks": [
        {
          "id": "st_1755573088578_1",
          "title": "Review Core Concepts",
          "description": "Revisit fundamental concepts that need strengthening",
          "type": "concept",
          "difficulty": "beginner"
        },
        {
          "id": "st_1755573088578_2",
          "title": "Practice Problems",
          "description": "Additional practice problems to reinforce learning",
          "type": "practice",
          "difficulty": "beginner"
        }
      ],
      "nextModuleUnlocked": false,
      "feedback": "You need more practice with these concepts. Complete the recommended subtasks before proceeding."
    },
    "timestamp": "2025-08-19T03:11:28.578Z"
  },
  {
    "sessionId": "arrays-array-basics-1755573361930",
    "submission": {
      "moduleId": "arrays",
      "subModuleId": "array-basics",
      "userId": "test-user",
      "startTime": "2025-08-19T03:15:47.361Z",
      "answers": {
        "q1": 3,
        "q2": 2,
        "q4": "dsadfasdf"
      },
      "timeSpent": 14,
      "currentQuestion": 0,
      "endTime": "2025-08-19T03:16:01.628Z",
      "completed": true
    },
    "score": 0,
    "results": {
      "subtasks": [
        {
          "id": "st_1755573362077_1",
          "title": "Review Core Concepts",
          "description": "Revisit fundamental concepts that need strengthening",
          "type": "concept",
          "difficulty": "beginner"
        },
        {
          "id": "st_1755573362077_2",
          "title": "Practice Problems",
          "description": "Additional practice problems to reinforce learning",
          "type": "practice",
          "difficulty": "beginner"
        }
      ],
      "nextModuleUnlocked": false,
      "feedback": "You need more practice with these concepts. Complete the recommended subtasks before proceeding."
    },
    "timestamp": "2025-08-19T03:16:02.077Z"
  },
  {
    "sessionId": "arrays-array-traversal-1755573386577",
    "submission": {
      "moduleId": "arrays",
      "subModuleId": "array-traversal",
      "userId": "test-user",
      "startTime": "2025-08-19T03:16:23.416Z",
      "answers": {
        "q1": 3
      },
      "timeSpent": 3,
      "currentQuestion": 0,
      "endTime": "2025-08-19T03:16:26.546Z",
      "completed": true
    },
    "score": 0,
    "results": {
      "subtasks": [
        {
          "id": "st_1755573386637_1",
          "title": "Review Core Concepts",
          "description": "Revisit fundamental concepts that need strengthening",
          "type": "concept",
          "difficulty": "beginner"
        },
        {
          "id": "st_1755573386637_2",
          "title": "Practice Problems",
          "description": "Additional practice problems to reinforce learning",
          "type": "practice",
          "difficulty": "beginner"
        }
      ],
      "nextModuleUnlocked": false,
      "feedback": "You need more practice with these concepts. Complete the recommended subtasks before proceeding."
    },
    "timestamp": "2025-08-19T03:16:26.637Z"
  },
  {
    "sessionId": "arrays-array-basics-1755574224435",
    "submission": {
      "moduleId": "arrays",
      "subModuleId": "array-basics",
      "userId": "test-user",
      "startTime": "2025-08-19T03:30:20.460Z",
      "answers": {
        "q1": 0
      },
      "timeSpent": 3,
      "currentQuestion": 0,
      "endTime": "2025-08-19T03:30:24.264Z",
      "completed": true
    },
    "score": 0,
    "results": {
      "subtasks": [
        {
          "id": "st_1755574224506_1",
          "title": "Review Core Concepts",
          "description": "Revisit fundamental concepts that need strengthening",
          "type": "concept",
          "difficulty": "beginner"
        },
        {
          "id": "st_1755574224506_2",
          "title": "Practice Problems",
          "description": "Additional practice problems to reinforce learning",
          "type": "practice",
          "difficulty": "beginner"
        }
      ],
      "nextModuleUnlocked": false,
      "feedback": "You need more practice with these concepts. Complete the recommended subtasks before proceeding."
    },
    "timestamp": "2025-08-19T03:30:24.506Z"
  },
  {
    "sessionId": "arrays-array-basics-1755574239930",
    "submission": {
      "moduleId": "arrays",
      "subModuleId": "array-basics",
      "userId": "test-user",
      "startTime": "2025-08-19T03:30:31.986Z",
      "answers": {
        "q1": 1,
        "q2": 1
      },
      "timeSpent": 7,
      "currentQuestion": 0,
      "endTime": "2025-08-19T03:30:39.907Z",
      "completed": true
    },
    "score": 0,
    "results": {
      "subtasks": [
        {
          "id": "st_1755574239979_1",
          "title": "Review Core Concepts",
          "description": "Revisit fundamental concepts that need strengthening",
          "type": "concept",
          "difficulty": "beginner"
        },
        {
          "id": "st_1755574239979_2",
          "title": "Practice Problems",
          "description": "Additional practice problems to reinforce learning",
          "type": "practice",
          "difficulty": "beginner"
        }
      ],
      "nextModuleUnlocked": false,
      "feedback": "You need more practice with these concepts. Complete the recommended subtasks before proceeding."
    },
    "timestamp": "2025-08-19T03:30:39.979Z"
  },
  {
    "sessionId": "arrays-array-basics-1755574481918",
    "submission": {
      "moduleId": "arrays",
      "subModuleId": "array-basics",
      "userId": "test-user",
      "startTime": "2025-08-19T03:34:35.233Z",
      "answers": {
        "q1": 1
      },
      "timeSpent": 6,
      "currentQuestion": 0,
      "endTime": "2025-08-19T03:34:41.756Z",
      "completed": true
    },
    "score": 0,
    "results": {
      "subtasks": [
        {
          "id": "st_1755574482016_1",
          "title": "Review Core Concepts",
          "description": "Revisit fundamental concepts that need strengthening",
          "type": "concept",
          "difficulty": "beginner"
        },
        {
          "id": "st_1755574482016_2",
          "title": "Practice Problems",
          "description": "Additional practice problems to reinforce learning",
          "type": "practice",
          "difficulty": "beginner"
        }
      ],
      "nextModuleUnlocked": false,
      "feedback": "You need more practice with these concepts. Complete the recommended subtasks before proceeding."
    },
    "timestamp": "2025-08-19T03:34:42.016Z"
  },
  {
    "sessionId": "arrays-array-basics-1755574569467",
    "submission": {
      "moduleId": "arrays",
      "subModuleId": "array-basics",
      "userId": "test-user",
      "startTime": "2025-08-19T03:35:56.357Z",
      "answers": {
        "q1": 2,
        "q2": 3,
        "q3": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint findMax(vector<int>& arr) {\n    // Your code here\n    gsrdgargagr\n}\n\nint main() {\n    vector<int> arr = {3, 7, 1, 9, 4};\n    cout << findMax(arr) << endl;\n    return 0;\n}",
        "q4": "sdfd"
      },
      "timeSpent": 9,
      "currentQuestion": 0,
      "realTimeResponses": [
        {
          "questionId": "q1",
          "response": 3,
          "timestamp": "2025-08-19T03:35:59.529Z",
          "confidence": 100
        },
        {
          "questionId": "q1",
          "response": 2,
          "timestamp": "2025-08-19T03:36:01.224Z",
          "confidence": 100
        },
        {
          "questionId": "q2",
          "response": 3,
          "timestamp": "2025-08-19T03:36:03.341Z",
          "confidence": 100
        },
        {
          "questionId": "q3",
          "response": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint findMax(vector<int>& arr) {\n    // Your code here\n    g\n}\n\nint main() {\n    vector<int> arr = {3, 7, 1, 9, 4};\n    cout << findMax(arr) << endl;\n    return 0;\n}",
          "timestamp": "2025-08-19T03:36:06.162Z",
          "confidence": 100
        },
        {
          "questionId": "q3",
          "response": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint findMax(vector<int>& arr) {\n    // Your code here\n    gs\n}\n\nint main() {\n    vector<int> arr = {3, 7, 1, 9, 4};\n    cout << findMax(arr) << endl;\n    return 0;\n}",
          "timestamp": "2025-08-19T03:36:06.320Z",
          "confidence": 100
        },
        {
          "questionId": "q3",
          "response": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint findMax(vector<int>& arr) {\n    // Your code here\n    gsr\n}\n\nint main() {\n    vector<int> arr = {3, 7, 1, 9, 4};\n    cout << findMax(arr) << endl;\n    return 0;\n}",
          "timestamp": "2025-08-19T03:36:06.373Z",
          "confidence": 100
        },
        {
          "questionId": "q3",
          "response": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint findMax(vector<int>& arr) {\n    // Your code here\n    gsrd\n}\n\nint main() {\n    vector<int> arr = {3, 7, 1, 9, 4};\n    cout << findMax(arr) << endl;\n    return 0;\n}",
          "timestamp": "2025-08-19T03:36:06.380Z",
          "confidence": 100
        },
        {
          "questionId": "q3",
          "response": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint findMax(vector<int>& arr) {\n    // Your code here\n    gsrdg\n}\n\nint main() {\n    vector<int> arr = {3, 7, 1, 9, 4};\n    cout << findMax(arr) << endl;\n    return 0;\n}",
          "timestamp": "2025-08-19T03:36:06.490Z",
          "confidence": 100
        },
        {
          "questionId": "q3",
          "response": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint findMax(vector<int>& arr) {\n    // Your code here\n    gsrdga\n}\n\nint main() {\n    vector<int> arr = {3, 7, 1, 9, 4};\n    cout << findMax(arr) << endl;\n    return 0;\n}",
          "timestamp": "2025-08-19T03:36:06.541Z",
          "confidence": 100
        },
        {
          "questionId": "q3",
          "response": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint findMax(vector<int>& arr) {\n    // Your code here\n    gsrdgar\n}\n\nint main() {\n    vector<int> arr = {3, 7, 1, 9, 4};\n    cout << findMax(arr) << endl;\n    return 0;\n}",
          "timestamp": "2025-08-19T03:36:06.613Z",
          "confidence": 100
        },
        {
          "questionId": "q3",
          "response": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint findMax(vector<int>& arr) {\n    // Your code here\n    gsrdgarg\n}\n\nint main() {\n    vector<int> arr = {3, 7, 1, 9, 4};\n    cout << findMax(arr) << endl;\n    return 0;\n}",
          "timestamp": "2025-08-19T03:36:06.701Z",
          "confidence": 100
        },
        {
          "questionId": "q3",
          "response": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint findMax(vector<int>& arr) {\n    // Your code here\n    gsrdgarga\n}\n\nint main() {\n    vector<int> arr = {3, 7, 1, 9, 4};\n    cout << findMax(arr) << endl;\n    return 0;\n}",
          "timestamp": "2025-08-19T03:36:06.798Z",
          "confidence": 100
        },
        {
          "questionId": "q3",
          "response": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint findMax(vector<int>& arr) {\n    // Your code here\n    gsrdgargag\n}\n\nint main() {\n    vector<int> arr = {3, 7, 1, 9, 4};\n    cout << findMax(arr) << endl;\n    return 0;\n}",
          "timestamp": "2025-08-19T03:36:06.896Z",
          "confidence": 100
        },
        {
          "questionId": "q3",
          "response": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nint findMax(vector<int>& arr) {\n    // Your code here\n    gsrdgargagr\n}\n\nint main() {\n    vector<int> arr = {3, 7, 1, 9, 4};\n    cout << findMax(arr) << endl;\n    return 0;\n}",
          "timestamp": "2025-08-19T03:36:06.907Z",
          "confidence": 100
        },
        {
          "questionId": "q4",
          "response": "s",
          "timestamp": "2025-08-19T03:36:08.569Z",
          "confidence": 2
        },
        {
          "questionId": "q4",
          "response": "sd",
          "timestamp": "2025-08-19T03:36:08.675Z",
          "confidence": 4
        },
        {
          "questionId": "q4",
          "response": "sdf",
          "timestamp": "2025-08-19T03:36:08.692Z",
          "confidence": 6
        },
        {
          "questionId": "q4",
          "response": "sdfd",
          "timestamp": "2025-08-19T03:36:08.870Z",
          "confidence": 8
        }
      ],
      "endTime": "2025-08-19T03:36:09.322Z",
      "completed": true
    },
    "score": 43,
    "results": {
      "subtasks": [
        {
          "id": "st_1755574569553_1",
          "title": "Review Core Concepts",
          "description": "Revisit fundamental concepts that need strengthening",
          "type": "concept",
          "difficulty": "beginner"
        },
        {
          "id": "st_1755574569553_2",
          "title": "Practice Problems",
          "description": "Additional practice problems to reinforce learning",
          "type": "practice",
          "difficulty": "beginner"
        }
      ],
      "nextModuleUnlocked": false,
      "feedback": "You need more practice with these concepts. Complete the recommended subtasks before proceeding."
    },
    "timestamp": "2025-08-19T03:36:09.553Z"
  }
]